name: test-slack-upload-debug

on:
  workflow_dispatch:  # This allows manual triggering from GitHub UI

jobs:
  test-slack-upload:
    runs-on: ubuntu-latest
    steps:
      - name: Check for jq
        run: |
          if ! command -v jq &> /dev/null; then
            echo "Installing jq..."
            sudo apt-get update
            sudo apt-get install -y jq
          fi
          jq --version

      - name: Test Slack File Upload
        run: |
          echo "===== SLACK FILE UPLOAD TEST ====="
          
          # Create a test file
          echo "This is a test file for Slack upload." > test_file.txt
          echo "Created at: $(date)" >> test_file.txt
          echo "This file tests the Slack files.getUploadURLExternal API." >> test_file.txt
          
          # Show file content and size
          echo "File content:"
          cat test_file.txt
          FILE_SIZE=$(wc -c < test_file.txt)
          echo "File size: $FILE_SIZE bytes"
          
          # Check token format (safely)
          TOKEN="${{ secrets.SLACK_BOT_TOKEN }}"
          TOKEN_PREFIX="${TOKEN:0:5}"
          TOKEN_LENGTH=${#TOKEN}
          
          echo "Token prefix: ${TOKEN_PREFIX}"
          echo "Token length: ${TOKEN_LENGTH} characters"
          
          if [[ ! "$TOKEN_PREFIX" == "xoxb-" ]]; then
            echo "⚠️ WARNING: Token doesn't start with 'xoxb-'. Please check your Bot Token format."
            echo "Slack Bot tokens should start with 'xoxb-'. User tokens and webhook URLs won't work."
          fi
          
          # Test token validity with a simple auth.test call
          echo -e "\nVerifying token with auth.test API..."
          AUTH_RESPONSE=$(curl -s -X POST \
            -H "Authorization: Bearer $TOKEN" \
            "https://slack.com/api/auth.test")
          
          echo "Auth test response:"
          echo "$AUTH_RESPONSE" | jq '.'
          
          if [[ $(echo "$AUTH_RESPONSE" | jq -r '.ok') == "true" ]]; then
            echo "✅ Token is valid! Authorized as: $(echo "$AUTH_RESPONSE" | jq -r '.user')"
            echo "Bot ID: $(echo "$AUTH_RESPONSE" | jq -r '.user_id')"
            echo "Team: $(echo "$AUTH_RESPONSE" | jq -r '.team')"
          else
            echo "❌ Token validation failed: $(echo "$AUTH_RESPONSE" | jq -r '.error')"
            echo "Please check your SLACK_BOT_TOKEN secret."
            exit 1
          fi
          
          # Check channel format
          CHANNEL_ID="${{ secrets.SLACK_CHANNEL_ID }}"
          if [[ ! "$CHANNEL_ID" =~ ^[CD][A-Z0-9]{8,}$ ]]; then
            echo "⚠️ WARNING: Channel ID format doesn't appear to be valid."
            echo "Channel ID: $CHANNEL_ID"
            echo "Should start with C (channel) or D (DM) followed by alphanumeric characters."
          fi
          
          # Step 1: Get upload URL from Slack - use explicit format
          echo -e "\nStep 1: Getting upload URL from Slack..."
          
          # Create JSON file for request (more reliable than inline JSON)
          cat > request.json << EOL
{"filename":"test_file.txt","length":$FILE_SIZE}
EOL
          
          echo "Request payload (from file):"
          cat request.json
          
          UPLOAD_URL_RESPONSE=$(curl -v -X POST \
            -H "Authorization: Bearer $TOKEN" \
            -H "Content-Type: application/json" \
            --data @request.json \
            "https://slack.com/api/files.getUploadURLExternal" 2>&1)
          
          echo "Full curl verbose output:"
          echo "$UPLOAD_URL_RESPONSE"
          
          # Extract just the JSON response body
          RESPONSE_BODY=$(echo "$UPLOAD_URL_RESPONSE" | grep -A 1000 '< HTTP/' | sed '1,/^{/s/^[^{]*//' | sed -n '/^{/,/^}/p')
          
          echo "Extracted JSON response:"
          echo "$RESPONSE_BODY"
          
          if echo "$RESPONSE_BODY" | grep -q '"ok":true'; then
            echo "✅ Successfully got upload URL"
            
            # Extract values using grep/sed since jq might not work with the mixed output
            UPLOAD_URL=$(echo "$RESPONSE_BODY" | grep -o '"upload_url":"[^"]*"' | sed 's/"upload_url":"//;s/"//')
            FILE_ID=$(echo "$RESPONSE_BODY" | grep -o '"file_id":"[^"]*"' | sed 's/"file_id":"//;s/"//')
            
            echo "Upload URL: $UPLOAD_URL"
            echo "File ID: $FILE_ID"
            
            # Step 2: Upload the file to the provided URL
            echo -e "\nStep 2: Uploading file to the provided URL..."
            
            UPLOAD_RESPONSE=$(curl -v -X PUT \
              -H "Content-Type: text/plain" \
              --data-binary "@test_file.txt" \
              "$UPLOAD_URL" 2>&1)
            
            echo "Upload response:"
            echo "$UPLOAD_RESPONSE"
            
            # Step 3: Complete the upload process
            echo -e "\nStep 3: Completing the upload process..."
            
            # Create completion JSON file
            cat > complete.json << EOL
{"files":[{"id":"$FILE_ID","title":"Test File Upload"}],"channel_id":"$CHANNEL_ID"}
EOL
            
            echo "Complete request payload:"
            cat complete.json
            
            COMPLETE_RESPONSE=$(curl -s -X POST \
              -H "Authorization: Bearer $TOKEN" \
              -H "Content-Type: application/json" \
              --data @complete.json \
              "https://slack.com/api/files.completeUploadExternal")
            
            echo "Complete response:"
            echo "$COMPLETE_RESPONSE" | jq '.' || echo "$COMPLETE_RESPONSE"
            
            if echo "$COMPLETE_RESPONSE" | grep -q '"ok":true'; then
              echo "✅ SUCCESS: File successfully uploaded to Slack!"
            else
              echo "❌ ERROR: Failed to complete upload"
              echo "$COMPLETE_RESPONSE"
            fi
          else
            echo "❌ ERROR: Failed to get upload URL"
            
            if echo "$RESPONSE_BODY" | grep -q "invalid_arguments"; then
              echo "The API is reporting missing required fields, but we included them."
              echo "This often happens when:"
              echo "1. The token doesn't have the 'files:write' scope"
              echo "2. The request is malformed or being rejected by Slack"
            fi
            
            # Show scopes if we can get them
            echo -e "\nAttempting to check token scopes..."
            SCOPES_RESPONSE=$(curl -s -X POST \
              -H "Authorization: Bearer $TOKEN" \
              "https://slack.com/api/auth.test")
            
            if [[ $(echo "$SCOPES_RESPONSE" | jq -r '.ok') == "true" ]]; then
              BOT_ID=$(echo "$SCOPES_RESPONSE" | jq -r '.user_id')
              
              # Try to get bot info
              BOT_INFO=$(curl -s -X POST \
                -H "Authorization: Bearer $TOKEN" \
                -d "bot=$BOT_ID" \
                "https://slack.com/api/bots.info")
              
              echo "Bot info response:"
              echo "$BOT_INFO" | jq '.'
            fi
          fi
          
          # Clean up
          rm -f test_file.txt request.json complete.json
          echo "===== TEST COMPLETE ====="