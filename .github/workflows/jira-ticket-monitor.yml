name: jira-ticket-monitor

on:
  schedule:
    - cron: '0,30 * * * 1-5'  # Every 30 minutes on weekdays
  workflow_dispatch:
  push:
    paths:
      - '.github/workflows/jira-ticket-monitor.yml'

env:
  TZ: 'Asia/Kolkata'  # Set timezone to IST for the entire workflow

jobs:
  monitor-jira-tickets:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
          
      - name: Send Workflow Update Notification
        if: github.event_name == 'push'
        run: |
          COMMIT_MSG=$(git log -1 --pretty=format:"%s")
          CHANGES=$(git diff --unified=0 HEAD^ HEAD .github/workflows/jira-ticket-monitor.yml | grep "^[+-]" | grep -v "^[+-][+-][+-]" | head -n 10)
          
          MESSAGE="üîÑ *WORKFLOW UPDATE DETECTED*\n\nüìù *Commit Message:*\n\`\`\`$COMMIT_MSG\`\`\`\n\nüë®‚Äçüíª *Changes Made:*\n\`\`\`\n$CHANGES\n...(more changes may not be shown)\n\`\`\`"
          
          curl -X POST \
            -H "Content-type: application/json" \
            --data "{\"text\": \"$MESSAGE\"}" \
            ${{ secrets.SLACK_WEBHOOK_URL }}
            
      - name: Monitor JIRA Tickets
        id: jira-monitor
        run: |
          # Debug: Print version info
          echo "===== RUNNING JIRA MONITOR SCRIPT ====="
          echo "Version: March 15, 2025 - Enhanced with hyperlinks"
          
          # Create URL encoding function
          urlencode() {
            local string="${1}"
            local strlen=${#string}
            local encoded=""
            local pos c o
            
            for (( pos=0 ; pos<strlen ; pos++ )); do
              c=${string:$pos:1}
              case "$c" in
                [-_.~a-zA-Z0-9] ) o="${c}" ;;
                * ) printf -v o '%%%02x' "'$c"
              esac
              encoded+="${o}"
            done
            echo "${encoded}"
          }
          
          # JIRA Base URL for API and hyperlinks
          JIRA_BASE_URL="https://quantium.atlassian.net"
          JIRA_API_URL="${JIRA_BASE_URL}/rest/api/3/search"
          JIRA_BROWSE_URL="${JIRA_BASE_URL}/issues/?jql="
          
          # Jira API credentials
          AUTH_HEADER="Authorization: Basic ${{ secrets.JIRA_API_TOKEN }}"
          ACCEPT_HEADER="Accept: application/json"
          
          # Full team members list
          TEAM_MEMBERS=(
            "Imran Mohd"
            "Kuppala Pavan Kumar"
            "Manikanta Raavi"
            "Bommali Naresh"
            "Rambabu Yarramsetti"
            "Sateesh Gulivindala"
            "Shaik Amair Ahmed"
          )
          
          echo "Monitoring tickets for ${#TEAM_MEMBERS[@]} team members"
          
          # We've identified customfield_10065 as having the correct priority values
          PRIORITY_FIELD="customfield_10065"
          echo "Using PRIORITY_FIELD=$PRIORITY_FIELD for priorities"
          
          # Based on findings, define priorities as found in JIRA
          # These match the values in customfield_10065
          PRIORITY_NAMES=("1 - Critical" "2 - High" "3 - Medium" "4 - Low" "5 - Very Low")
          PRIORITY_SHORT=("P1" "P2" "P3" "P4" "P5")
          EMOJIS=("üî¥" "üü†" "üü°" "üîµ" "‚ö™")
          AGE_EMOJIS=("üü¢" "üü°" "üî¥")
          
          # Echo information about priority definitions
          echo "Using defined priorities:"
          for i in {0..4}; do
            echo "  ${PRIORITY_SHORT[$i]} = ${PRIORITY_NAMES[$i]} ${EMOJIS[$i]}"
          done
          
          # Build team members clause for JQL
          TEAM_MEMBERS_CLAUSE=""
          for MEMBER in "${TEAM_MEMBERS[@]}"; do
            if [ -n "$TEAM_MEMBERS_CLAUSE" ]; then
              TEAM_MEMBERS_CLAUSE="$TEAM_MEMBERS_CLAUSE OR "
            fi
            TEAM_MEMBERS_CLAUSE="$TEAM_MEMBERS_CLAUSE assignee = \"$MEMBER\""
          done
          
          # Variables for tracking tickets
          TOTAL_OPEN_TICKETS=0
          PRIORITY_COUNTS=()
          for i in {0..4}; do
            PRIORITY_COUNTS[$i]=0
          done
          
          # Time in IST
          IST_TIME=$(date +"%I:%M %p IST")
          IST_DATE=$(date +"%d-%m-%Y")
          
          # Build header part
          HEADER="üìä *JIRA Monitor*"
          
          # Prepare team workload section
          TEAM_WORKLOAD="\n\n*Team Workload:*"
          
          # Process each team member
          for MEMBER in "${TEAM_MEMBERS[@]}"; do
            echo "üîç Fetching open tickets for: $MEMBER"
            
            # First query: All open tickets
            ALL_JQL="assignee = \"$MEMBER\" AND statusCategory != Done"
            ALL_JQL_ENCODED=$(urlencode "$ALL_JQL")
            ALL_URL="${JIRA_API_URL}?jql=${ALL_JQL_ENCODED}&maxResults=1000&fields=${PRIORITY_FIELD}"
            ALL_LINK="${JIRA_BROWSE_URL}${ALL_JQL_ENCODED}"
            
            # Fetch all tickets with the priority field
            ALL_RESPONSE=$(curl -s -H "$AUTH_HEADER" -H "$ACCEPT_HEADER" "$ALL_URL")
            
            # Extract total count
            TOTAL_COUNT=$(jq -r '.total' <<< "$ALL_RESPONSE")
            TOTAL_OPEN_TICKETS=$((TOTAL_OPEN_TICKETS + TOTAL_COUNT))
            
            echo "Found $TOTAL_COUNT tickets for $MEMBER"
            
            if [ "$TOTAL_COUNT" -gt 0 ]; then
              # Parse all tickets to count priorities
              ISSUES=$(jq '.issues' <<< "$ALL_RESPONSE")
              
              # Initialize counters for each priority
              MEMBER_PRIORITY_COUNTS=()
              for i in {0..4}; do
                MEMBER_PRIORITY_COUNTS[$i]=0
              done
              
              # Go through each ticket and examine its priority value
              ISSUE_COUNT=$(jq '. | length' <<< "$ISSUES")
              echo "Processing $ISSUE_COUNT tickets..."
              
              for (( j=0; j<ISSUE_COUNT; j++ )); do
                ISSUE=$(jq ".[$j]" <<< "$ISSUES")
                
                # Get the key for logging
                TICKET_KEY=$(jq -r '.key' <<< "$ISSUE")
                
                # Get the priority value from the nested JSON directly in one step
                PRIORITY_VALUE=$(jq -r ".fields.\"$PRIORITY_FIELD\".value" <<< "$ISSUE")
                echo "Ticket $TICKET_KEY: Priority = $PRIORITY_VALUE"
                
                # Count based on the exact priority value pattern
                if [[ "$PRIORITY_VALUE" == "1 - Critical" ]]; then
                  MEMBER_PRIORITY_COUNTS[0]=$((MEMBER_PRIORITY_COUNTS[0] + 1))
                  echo "  Counted as P1 (Critical)"
                elif [[ "$PRIORITY_VALUE" == "2 - High" ]]; then
                  MEMBER_PRIORITY_COUNTS[1]=$((MEMBER_PRIORITY_COUNTS[1] + 1))
                  echo "  Counted as P2 (High)"
                elif [[ "$PRIORITY_VALUE" == "3 - Medium" ]]; then
                  MEMBER_PRIORITY_COUNTS[2]=$((MEMBER_PRIORITY_COUNTS[2] + 1))
                  echo "  Counted as P3 (Medium)"
                elif [[ "$PRIORITY_VALUE" == "4 - Low" ]]; then
                  MEMBER_PRIORITY_COUNTS[3]=$((MEMBER_PRIORITY_COUNTS[3] + 1))
                  echo "  Counted as P4 (Low)"
                elif [[ "$PRIORITY_VALUE" == "5 - Very Low" ]]; then
                  MEMBER_PRIORITY_COUNTS[4]=$((MEMBER_PRIORITY_COUNTS[4] + 1))
                  echo "  Counted as P5 (Very Low)"
                else
                  echo "  ‚ö†Ô∏è UNMATCHED PRIORITY: $PRIORITY_VALUE"
                  # Default to P3 if unknown
                  MEMBER_PRIORITY_COUNTS[2]=$((MEMBER_PRIORITY_COUNTS[2] + 1))
                  echo "  Defaulted to P3"
                fi
              done
              
              # Update total counts
              for i in {0..4}; do
                PRIORITY_COUNTS[$i]=$((PRIORITY_COUNTS[$i] + MEMBER_PRIORITY_COUNTS[$i]))
              done
              
              echo "Priority counts for $MEMBER:"
              for i in {0..4}; do
                echo "  ${PRIORITY_SHORT[$i]}: ${MEMBER_PRIORITY_COUNTS[$i]}"
              done
              
              # Create JQL queries for each priority
              PRIORITY_JQLS=()
              PRIORITY_LINKS=()
              for i in {0..4}; do
                PRIORITY_NUMBER=$((i + 1))
                PRIORITY_JQL="assignee = \"$MEMBER\" AND statusCategory != Done AND \"${PRIORITY_FIELD}[Value]\" ~ \"${PRIORITY_NUMBER} -\""
                PRIORITY_JQLS[$i]="$PRIORITY_JQL"
                PRIORITY_LINKS[$i]="${JIRA_BROWSE_URL}$(urlencode "$PRIORITY_JQL")"
              done
              
              # Format priority section of message
              MEMBER_LINE="‚Ä¢ *${MEMBER}:* <${ALL_LINK}|${TOTAL_COUNT}>"
              MEMBER_LINE="${MEMBER_LINE}\n  ‚Ü≥ Priority: "
              
              for i in {0..4}; do
                if [ $i -gt 0 ]; then
                  MEMBER_LINE="${MEMBER_LINE} | "
                fi
                if [ ${MEMBER_PRIORITY_COUNTS[$i]} -gt 0 ]; then
                  MEMBER_LINE="${MEMBER_LINE}${EMOJIS[$i]} <${PRIORITY_LINKS[$i]}|${MEMBER_PRIORITY_COUNTS[$i]}>"
                else
                  MEMBER_LINE="${MEMBER_LINE}${EMOJIS[$i]} ${MEMBER_PRIORITY_COUNTS[$i]}"
                fi
              done
              
              # Format age breakdown with hyperlinks
              WEEK_JQL="assignee = \"$MEMBER\" AND statusCategory != Done AND created >= -7d"
              WEEK_JQL_ENCODED=$(urlencode "$WEEK_JQL")
              WEEK_URL="${JIRA_API_URL}?jql=${WEEK_JQL_ENCODED}&maxResults=1000"
              WEEK_LINK="${JIRA_BROWSE_URL}${WEEK_JQL_ENCODED}"
              WEEK_RESPONSE=$(curl -s -H "$AUTH_HEADER" -H "$ACCEPT_HEADER" "$WEEK_URL")
              WEEK_COUNT=$(jq -r '.total' <<< "$WEEK_RESPONSE")
              
              MONTH_JQL="assignee = \"$MEMBER\" AND statusCategory != Done AND created < -7d AND created >= -30d"
              MONTH_JQL_ENCODED=$(urlencode "$MONTH_JQL")
              MONTH_URL="${JIRA_API_URL}?jql=${MONTH_JQL_ENCODED}&maxResults=1000"
              MONTH_LINK="${JIRA_BROWSE_URL}${MONTH_JQL_ENCODED}"
              MONTH_RESPONSE=$(curl -s -H "$AUTH_HEADER" -H "$ACCEPT_HEADER" "$MONTH_URL")
              MONTH_COUNT=$(jq -r '.total' <<< "$MONTH_RESPONSE")
              
              OLDER_JQL="assignee = \"$MEMBER\" AND statusCategory != Done AND created < -30d"
              OLDER_JQL_ENCODED=$(urlencode "$OLDER_JQL")
              OLDER_URL="${JIRA_API_URL}?jql=${OLDER_JQL_ENCODED}&maxResults=1000"
              OLDER_LINK="${JIRA_BROWSE_URL}${OLDER_JQL_ENCODED}"
              OLDER_RESPONSE=$(curl -s -H "$AUTH_HEADER" -H "$ACCEPT_HEADER" "$OLDER_URL")
              OLDER_COUNT=$(jq -r '.total' <<< "$OLDER_RESPONSE")
              
              # Construct age text with hyperlinks
              MEMBER_LINE="${MEMBER_LINE}\n  ‚Ü≥ Age: "
              
              if [ "$WEEK_COUNT" -gt 0 ]; then
                MEMBER_LINE="${MEMBER_LINE}${AGE_EMOJIS[0]} <${WEEK_LINK}|${WEEK_COUNT}> (‚â§7d)"
              else
                MEMBER_LINE="${MEMBER_LINE}${AGE_EMOJIS[0]} ${WEEK_COUNT} (‚â§7d)"
              fi
              
              MEMBER_LINE="${MEMBER_LINE} | "
              
              if [ "$MONTH_COUNT" -gt 0 ]; then
                MEMBER_LINE="${MEMBER_LINE}${AGE_EMOJIS[1]} <${MONTH_LINK}|${MONTH_COUNT}> (8-30d)"
              else
                MEMBER_LINE="${MEMBER_LINE}${AGE_EMOJIS[1]} ${MONTH_COUNT} (8-30d)"
              fi
              
              MEMBER_LINE="${MEMBER_LINE} | "
              
              if [ "$OLDER_COUNT" -gt 0 ]; then
                MEMBER_LINE="${MEMBER_LINE}${AGE_EMOJIS[2]} <${OLDER_LINK}|${OLDER_COUNT}> (>30d)"
              else
                MEMBER_LINE="${MEMBER_LINE}${AGE_EMOJIS[2]} ${OLDER_COUNT} (>30d)"
              fi
            else
              # No tickets for this member
              MEMBER_LINE="‚Ä¢ *${MEMBER}:* 0"
            fi
            
            # Add to team workload section
            TEAM_WORKLOAD="${TEAM_WORKLOAD}\n${MEMBER_LINE}"
          done
          
          # Create JQL for each priority level for the entire team
          TEAM_PRIORITY_JQLS=()
          TEAM_PRIORITY_LINKS=()
          for i in {0..4}; do
            PRIORITY_NUMBER=$((i + 1))
            TEAM_PRIORITY_JQL="(${TEAM_MEMBERS_CLAUSE}) AND statusCategory != Done AND \"${PRIORITY_FIELD}[Value]\" ~ \"${PRIORITY_NUMBER} -\""
            TEAM_PRIORITY_JQLS[$i]="$TEAM_PRIORITY_JQL"
            TEAM_PRIORITY_LINKS[$i]="${JIRA_BROWSE_URL}$(urlencode "$TEAM_PRIORITY_JQL")"
          done
          
          # Build the complete message with all parts
          MESSAGE="$HEADER\n\n*Summary:*"
          
          # Plain text summary (no longer a test run)
          MESSAGE="$MESSAGE\n‚Ä¢ *Team JIRA Status Update*"
          MESSAGE="$MESSAGE\n‚Ä¢ *Open Tickets:* $TOTAL_OPEN_TICKETS"
          
          # Add priority breakdown with hyperlinks
          PRIORITY_SUMMARY="\n‚Ä¢ *Priority Breakdown:* "
          for i in {0..4}; do
            if [ $i -gt 0 ]; then
              PRIORITY_SUMMARY="${PRIORITY_SUMMARY} | "
            fi
            if [ ${PRIORITY_COUNTS[$i]} -gt 0 ]; then
              PRIORITY_SUMMARY="${PRIORITY_SUMMARY}${PRIORITY_SHORT[$i]}: <${TEAM_PRIORITY_LINKS[$i]}|${PRIORITY_COUNTS[$i]}> ${EMOJIS[$i]}"
            else
              PRIORITY_SUMMARY="${PRIORITY_SUMMARY}${PRIORITY_SHORT[$i]}: ${PRIORITY_COUNTS[$i]} ${EMOJIS[$i]}"
            fi
          done
          
          MESSAGE="$MESSAGE$PRIORITY_SUMMARY"
          
          # Add team workload section
          MESSAGE="$MESSAGE$TEAM_WORKLOAD"
          
          # Create team-wide age links
          TEAM_WEEK_JQL="(${TEAM_MEMBERS_CLAUSE}) AND statusCategory != Done AND created >= -7d"
          TEAM_WEEK_LINK="${JIRA_BROWSE_URL}$(urlencode "$TEAM_WEEK_JQL")"
          
          TEAM_MONTH_JQL="(${TEAM_MEMBERS_CLAUSE}) AND statusCategory != Done AND created < -7d AND created >= -30d"
          TEAM_MONTH_LINK="${JIRA_BROWSE_URL}$(urlencode "$TEAM_MONTH_JQL")"
          
          TEAM_OLDER_JQL="(${TEAM_MEMBERS_CLAUSE}) AND statusCategory != Done AND created < -30d"
          TEAM_OLDER_LINK="${JIRA_BROWSE_URL}$(urlencode "$TEAM_OLDER_JQL")"
          
          # Add priority field info and legends with hyperlinks
          MESSAGE="$MESSAGE\n\nüí° *Priority Field Used:* $PRIORITY_FIELD"
          MESSAGE="$MESSAGE\nüìä *Priority Legend:* ${EMOJIS[0]} ${PRIORITY_SHORT[0]} | ${EMOJIS[1]} ${PRIORITY_SHORT[1]} | ${EMOJIS[2]} ${PRIORITY_SHORT[2]} | ${EMOJIS[3]} ${PRIORITY_SHORT[3]} | ${EMOJIS[4]} ${PRIORITY_SHORT[4]}"
          MESSAGE="$MESSAGE\nüìÖ *Age Legend:* <${TEAM_WEEK_LINK}|üü¢ ‚â§7 days> | <${TEAM_MONTH_LINK}|üü° 8-30 days> | <${TEAM_OLDER_LINK}|üî¥ >30 days>"
          
          # Add timestamp
          MESSAGE="$MESSAGE\n\n‚è∞ *Last Updated:* $IST_DATE at $IST_TIME"
          
          echo "Sending notification to Slack..."
          
          # Slack sending with error handling
          MAX_RETRIES=3
          RETRY_COUNT=0
          
          # Escape double quotes for JSON
          ESCAPED_MESSAGE=$(echo "$MESSAGE" | sed 's/"/\\"/g')
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            # Send the message with simpler formatting
            RESPONSE=$(curl -s -X POST \
                 -H "Content-type: application/json" \
                 --data "{\"text\":\"$ESCAPED_MESSAGE\"}" \
                 ${{ secrets.SLACK_WEBHOOK_URL }})
            
            # Log the response for debugging
            echo "Slack API response: $RESPONSE"
            
            # Check if it was successful
            if echo "$RESPONSE" | grep -q "ok"; then
              echo "Notification sent successfully"
              exit 0
            fi
            
            RETRY_COUNT=$((RETRY_COUNT + 1))
            if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
              echo "Retrying... attempt $RETRY_COUNT of $MAX_RETRIES"
              sleep 2
            fi
          done
          
          echo "::error::Failed to send Slack notification after $MAX_RETRIES attempts"
          exit 1