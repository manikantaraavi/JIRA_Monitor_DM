name: jira-ticket-monitor

on:
  schedule:
    - cron: '30 4 * * 1-5'
  workflow_dispatch:
  push:
    paths:
      - '.github/workflows/jira-ticket-monitor.yml'

concurrency:
  group: jira-ticket-monitor
  cancel-in-progress: true

env:
  TZ: 'Asia/Kolkata'

jobs:
  monitor-jira-tickets:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Check environment
        run: |
          echo "Runner: $RUNNER_OS"
          echo "Free space:"
          df -h
          echo "Memory info:"
          free -h
            
      - name: Monitor JIRA Tickets
        id: jira-monitor
        run: |
          # Debug: Print version info
          echo "===== RUNNING JIRA MONITOR SCRIPT ====="
          echo "Version: Focused on Tickets Missing Recent External Comments"
          
          # Create URL encoding function
          urlencode() {
            local string="${1}"
            local strlen=${#string}
            local encoded=""
            local pos c o
            
            for (( pos=0 ; pos<strlen ; pos++ )); do
              c=${string:$pos:1}
              case "$c" in
                [-_.~a-zA-Z0-9] ) o="${c}" ;;
                * ) printf -v o '%%%02x' "'$c"
              esac
              encoded+="${o}"
            done
            echo "${encoded}"
          }
          
          # JIRA Base URL for API and hyperlinks
          JIRA_BASE_URL="https://quantium.atlassian.net"
          JIRA_API_URL="${JIRA_BASE_URL}/rest/api/3/search"
          JIRA_BROWSE_URL="${JIRA_BASE_URL}/issues/?jql="
          
          # Jira API credentials
          AUTH_HEADER="Authorization: Basic ${{ secrets.JIRA_API_TOKEN }}"
          ACCEPT_HEADER="Accept: application/json"
          
          # Define team members to monitor with full names and their Slack user IDs
          declare -A SLACK_IDS
          SLACK_IDS["Sateesh Gulivindala"]="U017R3REG2D"
          SLACK_IDS["Rambabu Yarramsetti"]="U017R3REG2D"
          
          MEMBERS=("Sateesh Gulivindala" "Rambabu Yarramsetti")
          echo "Monitoring tickets for: ${MEMBERS[*]}"
          
          # We've identified customfield_10065 as having the correct priority values
          PRIORITY_FIELD="customfield_10065"
          echo "Using PRIORITY_FIELD=$PRIORITY_FIELD for priorities"
          
          # Based on findings, define priorities as found in JIRA
          PRIORITY_NAMES=("1 - Critical" "2 - High" "3 - Medium" "4 - Low" "5 - Very Low")
          PRIORITY_SHORT=("P1" "P2" "P3" "P4" "P5")
          
          # Age categories without emojis
          AGE_CATEGORIES=("â‰¤7 days" "8-30 days" ">30 days")
          
          # Variables for tracking tickets
          TOTAL_OPEN_TICKETS=0
          PRIORITY_COUNTS=()
          for i in {0..4}; do
            PRIORITY_COUNTS[$i]=0
          done
          UNDEFINED_PRIORITY_COUNT=0
          
          # Create simple arrays for each member's stale tickets
          # (Using fixed arrays instead of associative arrays to avoid Bash limitations)
          STALE_TICKETS_SATEESH=()
          STALE_TICKETS_RAMBABU=()
          
          # Time in IST and Sydney
          IST_TIME=$(date +"%I:%M %p IST")
          IST_DATE=$(date +"%d-%m-%Y")
          SYDNEY_TIME=$(TZ='Australia/Sydney' date +"%I:%M %p AEDT")
          
          # Build header part
          HEADER="ðŸ“Š *JIRA Monitor Report*"
          
          # Create team-wide JQL for all tickets
          TEAM_JQL="assignee in (\"${MEMBERS[0]}\""
          for ((i=1; i<${#MEMBERS[@]}; i++)); do
            TEAM_JQL="${TEAM_JQL}, \"${MEMBERS[$i]}\""
          done
          TEAM_JQL="${TEAM_JQL}) AND status NOT IN (Closed, Resolved, Cancelled)"
          TEAM_LINK="${JIRA_BROWSE_URL}$(urlencode "$TEAM_JQL")"
          
          # Initialize member messages array
          MEMBER_MESSAGES=()
          MEMBER_MESSAGES_FOR_DM=()
          
          # Process each team member separately
          for MEMBER in "${MEMBERS[@]}"; do
            echo "Processing tickets for: $MEMBER"
            
            # First query: All open tickets for this member
            ALL_JQL="assignee = \"$MEMBER\" AND status NOT IN (Closed, Resolved, Cancelled)"
            ALL_JQL_ENCODED=$(urlencode "$ALL_JQL")
            ALL_URL="${JIRA_API_URL}?jql=${ALL_JQL_ENCODED}&maxResults=1000&fields=${PRIORITY_FIELD},summary,created,updated"
            ALL_LINK="${JIRA_BROWSE_URL}${ALL_JQL_ENCODED}"
            
            # Fetch all tickets with the priority field for this member
            echo "Fetching tickets for $MEMBER..."
            ALL_RESPONSE=$(curl -s -H "$AUTH_HEADER" -H "$ACCEPT_HEADER" "$ALL_URL")
            
            # Check for API errors
            if echo "$ALL_RESPONSE" | jq -e '.errorMessages' > /dev/null; then
              API_ERROR=$(echo "$ALL_RESPONSE" | jq -r '.errorMessages[0]')
              echo "ERROR: JIRA API returned an error for $MEMBER: $API_ERROR"
              continue
            fi
            
            # Extract total count
            TOTAL_COUNT=$(jq -r '.total' <<< "$ALL_RESPONSE")
            TOTAL_OPEN_TICKETS=$((TOTAL_OPEN_TICKETS + TOTAL_COUNT))
            echo "Found $TOTAL_COUNT total tickets for $MEMBER"
            
            # Initialize counts for this member
            MEMBER_PRIORITY_COUNTS=()
            for i in {0..4}; do
              MEMBER_PRIORITY_COUNTS[$i]=0
            done
            MEMBER_UNDEFINED_COUNT=0
            
            # Get all ticket keys for this member for stale check later
            MEMBER_TICKET_KEYS=($(echo "$ALL_RESPONSE" | jq -r '.issues[].key'))
            
            if [ "$TOTAL_COUNT" -gt 0 ]; then
              # Parse all tickets to count priorities
              ISSUES=$(jq '.issues' <<< "$ALL_RESPONSE")
              
              # Go through each ticket and examine its priority value
              ISSUE_COUNT=$(jq '. | length' <<< "$ISSUES")
              
              for (( j=0; j<ISSUE_COUNT; j++ )); do
                ISSUE=$(jq ".[$j]" <<< "$ISSUES")
                TICKET_KEY=$(jq -r '.key' <<< "$ISSUE")
                
                # Get the priority value from the nested JSON directly
                PRIORITY_VALUE=$(jq -r ".fields.\"$PRIORITY_FIELD\".value // \"Unknown\"" <<< "$ISSUE")
                
                # Debug the priority value to help diagnose issues
                echo "  Ticket: $TICKET_KEY | Priority Value: '$PRIORITY_VALUE'"
                
                # Count based on the exact priority value pattern
                if [[ "$PRIORITY_VALUE" == "1 - Critical" ]]; then
                  MEMBER_PRIORITY_COUNTS[0]=$((MEMBER_PRIORITY_COUNTS[0] + 1))
                  PRIORITY_COUNTS[0]=$((PRIORITY_COUNTS[0] + 1))
                elif [[ "$PRIORITY_VALUE" == "2 - High" ]]; then
                  MEMBER_PRIORITY_COUNTS[1]=$((MEMBER_PRIORITY_COUNTS[1] + 1))
                  PRIORITY_COUNTS[1]=$((PRIORITY_COUNTS[1] + 1))
                elif [[ "$PRIORITY_VALUE" == "3 - Medium" ]]; then
                  MEMBER_PRIORITY_COUNTS[2]=$((MEMBER_PRIORITY_COUNTS[2] + 1))
                  PRIORITY_COUNTS[2]=$((PRIORITY_COUNTS[2] + 1))
                elif [[ "$PRIORITY_VALUE" == "4 - Low" ]]; then
                  MEMBER_PRIORITY_COUNTS[3]=$((MEMBER_PRIORITY_COUNTS[3] + 1))
                  PRIORITY_COUNTS[3]=$((PRIORITY_COUNTS[3] + 1))
                elif [[ "$PRIORITY_VALUE" == "5 - Very Low" ]]; then
                  MEMBER_PRIORITY_COUNTS[4]=$((MEMBER_PRIORITY_COUNTS[4] + 1))
                  PRIORITY_COUNTS[4]=$((PRIORITY_COUNTS[4] + 1))
                else
                  # Default to P3 if unknown, but also track undefined separately
                  MEMBER_PRIORITY_COUNTS[2]=$((MEMBER_PRIORITY_COUNTS[2] + 1))
                  PRIORITY_COUNTS[2]=$((PRIORITY_COUNTS[2] + 1))
                  
                  # Increment undefined counters
                  MEMBER_UNDEFINED_COUNT=$((MEMBER_UNDEFINED_COUNT + 1))
                  UNDEFINED_PRIORITY_COUNT=$((UNDEFINED_PRIORITY_COUNT + 1))
                  
                  echo "  NOTE: Ticket with undefined priority counted as P3: $TICKET_KEY"
                fi
              done
              
              # Format age breakdown - Query for each age category
              WEEK_JQL="assignee = \"$MEMBER\" AND status NOT IN (Closed, Resolved, Cancelled) AND created >= -7d"
              WEEK_JQL_ENCODED=$(urlencode "$WEEK_JQL")
              WEEK_LINK="${JIRA_BROWSE_URL}${WEEK_JQL_ENCODED}"
              WEEK_RESPONSE=$(curl -s -H "$AUTH_HEADER" -H "$ACCEPT_HEADER" "${JIRA_API_URL}?jql=${WEEK_JQL_ENCODED}&maxResults=0")
              WEEK_COUNT=$(jq -r '.total' <<< "$WEEK_RESPONSE")
              
              MONTH_JQL="assignee = \"$MEMBER\" AND status NOT IN (Closed, Resolved, Cancelled) AND created < -7d AND created >= -30d"
              MONTH_JQL_ENCODED=$(urlencode "$MONTH_JQL")
              MONTH_LINK="${JIRA_BROWSE_URL}${MONTH_JQL_ENCODED}"
              MONTH_RESPONSE=$(curl -s -H "$AUTH_HEADER" -H "$ACCEPT_HEADER" "${JIRA_API_URL}?jql=${MONTH_JQL_ENCODED}&maxResults=0")
              MONTH_COUNT=$(jq -r '.total' <<< "$MONTH_RESPONSE")
              
              # Fix the older query format by adding proper quotes
              OLDER_JQL="assignee = \"$MEMBER\" AND status NOT IN (Closed, Resolved, Cancelled) AND created < \"-30d\""
              OLDER_JQL_ENCODED=$(urlencode "$OLDER_JQL")
              OLDER_LINK="${JIRA_BROWSE_URL}${OLDER_JQL_ENCODED}"
              OLDER_RESPONSE=$(curl -s -H "$AUTH_HEADER" -H "$ACCEPT_HEADER" "${JIRA_API_URL}?jql=${OLDER_JQL_ENCODED}&maxResults=0")
              OLDER_COUNT=$(jq -r '.total' <<< "$OLDER_RESPONSE")
              
              # Check for stale tickets (No recent external comments)
              echo "Looking for tickets with no recent external comments for $MEMBER..."
              
              # Calculate date 7 days ago for comparison
              SEVEN_DAYS_AGO=$(date -d "7 days ago" +%s)
              
              # Process each ticket to check for recent external comments
              for TICKET_KEY in "${MEMBER_TICKET_KEYS[@]}"; do
                # Get the ticket summary to check for exclusions
                TICKET_URL="${JIRA_BASE_URL}/rest/api/3/issue/${TICKET_KEY}?fields=summary"
                TICKET_RESPONSE=$(curl -s -H "$AUTH_HEADER" -H "$ACCEPT_HEADER" "$TICKET_URL")
                TICKET_SUMMARY=$(echo "$TICKET_RESPONSE" | jq -r '.fields.summary // ""')
                
                # Check if this ticket should be excluded based on summary
                EXCLUDED=false
                if [[ "$TICKET_SUMMARY" =~ [Pp]hish\ [Mm]ail || 
                      "$TICKET_SUMMARY" =~ [Oo]ffboarding\ [Rr]equest ||
                      "$TICKET_SUMMARY" =~ [Oo]nboarding\ [Rr]equest ||
                      "$TICKET_SUMMARY" =~ [Aa]pplication\ [Pp]atching ]]; then
                  echo "  $TICKET_KEY - EXCLUDED from stale count due to summary: $TICKET_SUMMARY"
                  EXCLUDED=true
                fi
                
                # Skip further processing if the ticket is excluded
                if [ "$EXCLUDED" = true ]; then
                  continue
                fi
                # Fetch comments for this ticket
                COMMENT_URL="${JIRA_BASE_URL}/rest/api/3/issue/${TICKET_KEY}/comment"
                COMMENT_RESPONSE=$(curl -s -H "$AUTH_HEADER" -H "$ACCEPT_HEADER" "$COMMENT_URL")
                
                # Initialize variables
                HAS_RECENT_EXTERNAL_COMMENT=false
                MOST_RECENT_EXTERNAL_DATE=""
                
                # Process comments if they exist
                if [[ $(echo "$COMMENT_RESPONSE" | jq 'has("comments")') == "true" ]]; then
                  COMMENTS=$(echo "$COMMENT_RESPONSE" | jq '.comments')
                  COMMENT_COUNT=$(echo "$COMMENTS" | jq '. | length')
                  
                  if [ "$COMMENT_COUNT" -gt 0 ]; then
                    # Loop through all comments to find external ones and track most recent
                    for (( k=0; k<COMMENT_COUNT; k++ )); do
                      COMMENT=$(echo "$COMMENTS" | jq ".[$k]")
                      
                      if [[ $(echo "$COMMENT" | jq 'has("jsdPublic")') == "true" ]]; then
                        IS_PUBLIC=$(echo "$COMMENT" | jq -r '.jsdPublic')
                        if [[ "$IS_PUBLIC" == "true" ]]; then
                          COMMENT_DATE=$(echo "$COMMENT" | jq -r '.created')
                          
                          # Track the most recent external comment date
                          if [[ -z "$MOST_RECENT_EXTERNAL_DATE" || "$COMMENT_DATE" > "$MOST_RECENT_EXTERNAL_DATE" ]]; then
                            MOST_RECENT_EXTERNAL_DATE="$COMMENT_DATE"
                          fi
                        fi
                      fi
                    done
                    
                    # Check if there was any external comment
                    if [ -n "$MOST_RECENT_EXTERNAL_DATE" ]; then
                      # Convert to timestamp for comparison
                      RECENT_TIMESTAMP=$(date -d "$MOST_RECENT_EXTERNAL_DATE" +%s)
                      
                      # Check if the most recent external comment is within the last 7 days
                      if [ "$RECENT_TIMESTAMP" -ge "$SEVEN_DAYS_AGO" ]; then
                        HAS_RECENT_EXTERNAL_COMMENT=true
                      else
                        echo "  $TICKET_KEY - Has external comments but all are older than 7 days"
                        # Add to the appropriate member's stale ticket array using simple name-based if statements
                        if [[ "$MEMBER" == "Sateesh Gulivindala" ]]; then
                          STALE_TICKETS_SATEESH+=("$TICKET_KEY")
                        elif [[ "$MEMBER" == "Rambabu Yarramsetti" ]]; then
                          STALE_TICKETS_RAMBABU+=("$TICKET_KEY")
                        fi
                      fi
                    else
                      echo "  $TICKET_KEY - No external comments found"
                      # Add to the appropriate member's stale ticket array
                      if [[ "$MEMBER" == "Sateesh Gulivindala" ]]; then
                        STALE_TICKETS_SATEESH+=("$TICKET_KEY")
                      elif [[ "$MEMBER" == "Rambabu Yarramsetti" ]]; then
                        STALE_TICKETS_RAMBABU+=("$TICKET_KEY")
                      fi
                    fi
                  else
                    echo "  $TICKET_KEY - No comments at all"
                    # Add to the appropriate member's stale ticket array
                    if [[ "$MEMBER" == "Sateesh Gulivindala" ]]; then
                      STALE_TICKETS_SATEESH+=("$TICKET_KEY")
                    elif [[ "$MEMBER" == "Rambabu Yarramsetti" ]]; then
                      STALE_TICKETS_RAMBABU+=("$TICKET_KEY")
                    fi
                  fi
                else
                  echo "  WARNING: Could not fetch comments for $TICKET_KEY"
                  # Assume worst case if we can't check, add to stale tickets
                  if [[ "$MEMBER" == "Sateesh Gulivindala" ]]; then
                    STALE_TICKETS_SATEESH+=("$TICKET_KEY")
                  elif [[ "$MEMBER" == "Rambabu Yarramsetti" ]]; then
                    STALE_TICKETS_RAMBABU+=("$TICKET_KEY")
                  fi
                fi
              done
              
              # Get stale ticket count based on member name
              STALE_COUNT=0
              STALE_CSV=""
              if [[ "$MEMBER" == "Sateesh Gulivindala" ]]; then
                STALE_COUNT=${#STALE_TICKETS_SATEESH[@]}
                if [ $STALE_COUNT -gt 0 ]; then
                  STALE_CSV=$(IFS=,; echo "${STALE_TICKETS_SATEESH[*]}")
                fi
              elif [[ "$MEMBER" == "Rambabu Yarramsetti" ]]; then
                STALE_COUNT=${#STALE_TICKETS_RAMBABU[@]}
                if [ $STALE_COUNT -gt 0 ]; then
                  STALE_CSV=$(IFS=,; echo "${STALE_TICKETS_RAMBABU[*]}")
                fi
              fi
              
              # Format member stale ticket information
              if [ $STALE_COUNT -gt 0 ]; then
                # Create the JQL query with issueKey
                STALE_JQL="issueKey in (${STALE_CSV}) ORDER BY created DESC"
                STALE_JQL_ENCODED=$(urlencode "$STALE_JQL")
                STALE_LINK="${JIRA_BROWSE_URL}${STALE_JQL_ENCODED}"
                
                STALE_INFO=" | <${STALE_LINK}|${STALE_COUNT} stale>"
              else
                STALE_INFO=" | 0 stale"
              fi
              
              # Format message for this member, including stale info beside name
              MEMBER_MESSAGE="â€¢ *${MEMBER}:* <${ALL_LINK}|${TOTAL_COUNT}>${STALE_INFO}"
              
              # Create separate priority JQL for each priority
              MEMBER_MESSAGE="${MEMBER_MESSAGE}\n  â†³ Priority: "
              
              for i in {0..4}; do
                if [ $i -gt 0 ]; then
                  MEMBER_MESSAGE="${MEMBER_MESSAGE} | "
                fi
                
                # Create priority-specific JQL
                PRIORITY_JQL="assignee = \"$MEMBER\" AND status NOT IN (Closed, Resolved, Cancelled) AND \"$PRIORITY_FIELD\".value = \"${PRIORITY_NAMES[$i]}\""
                PRIORITY_JQL_ENCODED=$(urlencode "$PRIORITY_JQL")
                PRIORITY_LINK="${JIRA_BROWSE_URL}${PRIORITY_JQL_ENCODED}"
                
                if [ ${MEMBER_PRIORITY_COUNTS[$i]} -gt 0 ]; then
                  MEMBER_MESSAGE="${MEMBER_MESSAGE}<${PRIORITY_LINK}|${PRIORITY_SHORT[$i]}: ${MEMBER_PRIORITY_COUNTS[$i]}>"
                else
                  MEMBER_MESSAGE="${MEMBER_MESSAGE}${PRIORITY_SHORT[$i]}: ${MEMBER_PRIORITY_COUNTS[$i]}"
                fi
              done
              
              # Add age breakdown to the message
              MEMBER_MESSAGE="${MEMBER_MESSAGE}\n  â†³ Age: "
              
              if [ "$WEEK_COUNT" -gt 0 ]; then
                MEMBER_MESSAGE="${MEMBER_MESSAGE}<${WEEK_LINK}|${WEEK_COUNT}> (â‰¤7d)"
              else
                MEMBER_MESSAGE="${MEMBER_MESSAGE}${WEEK_COUNT} (â‰¤7d)"
              fi
              
              MEMBER_MESSAGE="${MEMBER_MESSAGE} | "
              
              if [ "$MONTH_COUNT" -gt 0 ]; then
                MEMBER_MESSAGE="${MEMBER_MESSAGE}<${MONTH_LINK}|${MONTH_COUNT}> (8-30d)"
              else
                MEMBER_MESSAGE="${MEMBER_MESSAGE}${MONTH_COUNT} (8-30d)"
              fi
              
              MEMBER_MESSAGE="${MEMBER_MESSAGE} | "
              
              if [ "$OLDER_COUNT" -gt 0 ]; then
                MEMBER_MESSAGE="${MEMBER_MESSAGE}<${OLDER_LINK}|${OLDER_COUNT}> (>30d)"
              else
                MEMBER_MESSAGE="${MEMBER_MESSAGE}${OLDER_COUNT} (>30d)"
              fi
              
              # Create a personalized DM message for the member
              DM_HEADER="ðŸ“Š *Your JIRA Ticket Update* ($SYDNEY_TIME / $IST_TIME)\n\n"
              DM_MESSAGE="${DM_HEADER}Hi ${MEMBER}, here's your current JIRA status:\n\n"
              DM_MESSAGE="${DM_MESSAGE}â€¢ *Your Open Tickets:* <${ALL_LINK}|${TOTAL_COUNT}>"
              
              if [ $STALE_COUNT -gt 0 ]; then
                DM_MESSAGE="${DM_MESSAGE} (including <${STALE_LINK}|${STALE_COUNT} stale tickets> needing response)"
              else
                DM_MESSAGE="${DM_MESSAGE} (No stale tickets - great job!)"
              fi
              
              # Add priority breakdown
              DM_MESSAGE="${DM_MESSAGE}\nâ€¢ *Priority Breakdown:* "
              for i in {0..4}; do
                if [ $i -gt 0 ]; then
                  DM_MESSAGE="${DM_MESSAGE} | "
                fi
                
                PRIORITY_JQL="assignee = \"$MEMBER\" AND status NOT IN (Closed, Resolved, Cancelled) AND \"$PRIORITY_FIELD\".value = \"${PRIORITY_NAMES[$i]}\""
                PRIORITY_JQL_ENCODED=$(urlencode "$PRIORITY_JQL")
                PRIORITY_LINK="${JIRA_BROWSE_URL}${PRIORITY_JQL_ENCODED}"
                
                if [ ${MEMBER_PRIORITY_COUNTS[$i]} -gt 0 ]; then
                  DM_MESSAGE="${DM_MESSAGE}<${PRIORITY_LINK}|${PRIORITY_SHORT[$i]}: ${MEMBER_PRIORITY_COUNTS[$i]}>"
                else
                  DM_MESSAGE="${DM_MESSAGE}${PRIORITY_SHORT[$i]}: ${MEMBER_PRIORITY_COUNTS[$i]}"
                fi
              done
              
              # Add age info
              DM_MESSAGE="${DM_MESSAGE}\nâ€¢ *Ticket Age:* "
              
              if [ "$WEEK_COUNT" -gt 0 ]; then
                DM_MESSAGE="${DM_MESSAGE}<${WEEK_LINK}|${WEEK_COUNT}> (â‰¤7d)"
              else
                DM_MESSAGE="${DM_MESSAGE}${WEEK_COUNT} (â‰¤7d)"
              fi
              
              DM_MESSAGE="${DM_MESSAGE} | "
              
              if [ "$MONTH_COUNT" -gt 0 ]; then
                DM_MESSAGE="${DM_MESSAGE}<${MONTH_LINK}|${MONTH_COUNT}> (8-30d)"
              else
                DM_MESSAGE="${DM_MESSAGE}${MONTH_COUNT} (8-30d)"
              fi
              
              DM_MESSAGE="${DM_MESSAGE} | "
              
              if [ "$OLDER_COUNT" -gt 0 ]; then
                DM_MESSAGE="${DM_MESSAGE}<${OLDER_LINK}|${OLDER_COUNT}> (>30d)"
              else
                DM_MESSAGE="${DM_MESSAGE}${OLDER_COUNT} (>30d)"
              fi
              
              # Add information about specific stale tickets if any
              if [ $STALE_COUNT -gt 0 ]; then
                DM_MESSAGE="${DM_MESSAGE}\n\nðŸ”” *Tickets Needing Attention:* These tickets have no external comments in the last 7 days:\n"
                
                # Get the stale tickets array based on member name
                TICKET_ARRAY=()
                if [[ "$MEMBER" == "Sateesh Gulivindala" ]]; then
                  TICKET_ARRAY=("${STALE_TICKETS_SATEESH[@]}")
                elif [[ "$MEMBER" == "Rambabu Yarramsetti" ]]; then
                  TICKET_ARRAY=("${STALE_TICKETS_RAMBABU[@]}")
                fi
                
                # List up to 5 stale tickets with direct links
                MAX_TICKETS_TO_LIST=5
                TICKETS_LISTED=0
                
                for TICKET in "${TICKET_ARRAY[@]}"; do
                  if [ $TICKETS_LISTED -lt $MAX_TICKETS_TO_LIST ]; then
                    TICKET_DIRECT_LINK="${JIRA_BASE_URL}/browse/${TICKET}"
                    
                    # Get ticket summary
                    TICKET_URL="${JIRA_BASE_URL}/rest/api/3/issue/${TICKET}?fields=summary"
                    TICKET_RESPONSE=$(curl -s -H "$AUTH_HEADER" -H "$ACCEPT_HEADER" "$TICKET_URL")
                    TICKET_SUMMARY=$(echo "$TICKET_RESPONSE" | jq -r '.fields.summary // "No summary available"')
                    
                    # Add to DM message
                    DM_MESSAGE="${DM_MESSAGE}â€¢ <${TICKET_DIRECT_LINK}|${TICKET}> - ${TICKET_SUMMARY}\n"
                    TICKETS_LISTED=$((TICKETS_LISTED + 1))
                  else
                    break
                  fi
                done
                
                # If there are more tickets, add a note
                REMAINING_TICKETS=$((STALE_COUNT - TICKETS_LISTED))
                if [ $REMAINING_TICKETS -gt 0 ]; then
                  DM_MESSAGE="${DM_MESSAGE}â€¢ <${STALE_LINK}|${REMAINING_TICKETS} more stale tickets...>"
                fi
              fi
            else
              # No tickets for this member
              MEMBER_MESSAGE="â€¢ *${MEMBER}:* 0 | 0 stale"
              DM_MESSAGE="ðŸ“Š *Your JIRA Ticket Update* ($SYDNEY_TIME / $IST_TIME)\n\nHi ${MEMBER}, you currently have no open tickets assigned to you in JIRA."
            fi
            
            # Add this member's message to the arrays
            MEMBER_MESSAGES+=("$MEMBER_MESSAGE")
            MEMBER_MESSAGES_FOR_DM+=("$DM_MESSAGE")
            
            # Get the Slack ID for this member
            SLACK_ID="${SLACK_IDS[$MEMBER]}"
          done
          
          # Fix the age legend hyperlinks
          TEAM_WEEK_JQL="assignee in (\"${MEMBERS[0]}\""
          for ((i=1; i<${#MEMBERS[@]}; i++)); do
            TEAM_WEEK_JQL="${TEAM_WEEK_JQL}, \"${MEMBERS[$i]}\""
          done
          TEAM_WEEK_JQL="${TEAM_WEEK_JQL}) AND status NOT IN (Closed, Resolved, Cancelled) AND created >= -7d"
          TEAM_WEEK_LINK="${JIRA_BROWSE_URL}$(urlencode "$TEAM_WEEK_JQL")"
          
          TEAM_MONTH_JQL="assignee in (\"${MEMBERS[0]}\""
          for ((i=1; i<${#MEMBERS[@]}; i++)); do
            TEAM_MONTH_JQL="${TEAM_MONTH_JQL}, \"${MEMBERS[$i]}\""
          done
          TEAM_MONTH_JQL="${TEAM_MONTH_JQL}) AND status NOT IN (Closed, Resolved, Cancelled) AND created < -7d AND created >= -30d"
          TEAM_MONTH_LINK="${JIRA_BROWSE_URL}$(urlencode "$TEAM_MONTH_JQL")"
          
          TEAM_OLDER_JQL="assignee in (\"${MEMBERS[0]}\""
          for ((i=1; i<${#MEMBERS[@]}; i++)); do
            TEAM_OLDER_JQL="${TEAM_OLDER_JQL}, \"${MEMBERS[$i]}\""
          done
          TEAM_OLDER_JQL="${TEAM_OLDER_JQL}) AND status NOT IN (Closed, Resolved, Cancelled) AND created < \"-30d\""
          TEAM_OLDER_LINK="${JIRA_BROWSE_URL}$(urlencode "$TEAM_OLDER_JQL")"
          
          # Build the summary message
          SUMMARY_MESSAGE="$HEADER\n\n*Summary:*"
          
          # Plain text summary with hyperlink for total tickets and time zones
          SUMMARY_MESSAGE="$SUMMARY_MESSAGE\nâ€¢ *JIRA Status Update* ($SYDNEY_TIME / $IST_TIME)"
          SUMMARY_MESSAGE="$SUMMARY_MESSAGE\nâ€¢ *Open Tickets:* <${TEAM_LINK}|${TOTAL_OPEN_TICKETS}>"
          
          # Add priority breakdown with hyperlinks to specific priority searches
          PRIORITY_SUMMARY="\nâ€¢ *Priority Breakdown:* "
          for i in {0..4}; do
            if [ $i -gt 0 ]; then
              PRIORITY_SUMMARY="${PRIORITY_SUMMARY} | "
            fi
            
            # Create priority-specific JQL across team members
            PRIORITY_JQL="assignee in (\"${MEMBERS[0]}\""
            for ((j=1; j<${#MEMBERS[@]}